{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u26a1 Getting Started with <code>grid-reducer</code>","text":"<p>Welcome! Follow the steps below to get <code>grid-reducer</code> up and running locally. We recommend using a Python virtual environment for a clean install \ud83d\udd12\ud83d\udc0d.</p>"},{"location":"#step-1-set-up-a-python-environment","title":"\ud83e\uddea Step 1: Set Up a Python Environment","text":"<p>To avoid dependency conflicts, create and activate a virtual environment.</p> <p>You can use any tool of your choice \u2014 here are a few popular options:</p> \ud83d\udfe2 Option A: Using <code>venv</code> (Standard Library) <pre><code>python3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre> \ud83d\udd35 Option B: Using <code>conda</code> <pre><code>conda create -n grid-reducer-env python=3.10\nconda activate grid-reducer-env\n</code></pre>"},{"location":"#step-2-install-the-project-locally","title":"\ud83d\ude80 Step 2: Install the Project Locally","text":"<p>Install the project in editable mode so changes to the code reflect immediately:</p> <pre><code>pip install grid_reducer\n</code></pre> <p>\u2705 This will also install all required dependencies.</p>"},{"location":"#example-cli-usage","title":"\ud83d\udee0 Example CLI Usage","text":"<p>Once installed, you can use command line interface. Run <code>grid --help</code> to see all the available command options.</p> <p>Here is a minimal example to reduce OpenDSS model.</p> <pre><code>grid reduce -f Master.dss\n</code></pre>"},{"location":"#example-python-usage","title":"Example Python Usage","text":"<p>You can also reduce the feeder model through python scripts.</p> <p>Here is a minimal example to reduce OpenDSS feeder model using Python Script.</p> <pre><code>from pathlib import Path\n\nfrom grid_reducer.reducer import OpenDSSModelReducer\n\nfile_path = \"master.dss\"\nreducer = OpenDSSModelReducer(master_dss_file=file_path)\nreduced_ckt = reducer.reduce(transform_coordinate=True)\n\nout_folder = Path(\"outputs\")\nout_folder.mkdir(parents=True, exist_ok=True)\noriginal_circuit_file = out_folder / \"original_ckt.dss\"\nreduced_circuit_file = out_folder / \"reduced_ckt.dss\"\nreducer.export_original_ckt(original_circuit_file)\nreducer.export(reduced_ckt, reduced_circuit_file)\n</code></pre>"},{"location":"#notes","title":"\ud83d\udccc Notes","text":"<ul> <li>This is the recommended way to use the project during development.</li> <li>In the future, the project may support installation via:</li> </ul> <pre><code>pip install grid-reducer\n</code></pre> <p>Stay tuned for updates! \ud83d\udcec</p> <p>Need help? Feel free to open an issue or reach out to the maintainers. \ud83d\udcac</p>"},{"location":"methodology/","title":"Methodology","text":""},{"location":"methodology/#feeder-reduction-approach","title":"Feeder Reduction Approach","text":"<p>We reduce and obfuscate a given distribution system model (OpenDSS format) in four steps.</p> <ol> <li> <p>Strip the secondary but keep aggregated loads and generation to a parent node.</p> <p>Here is a flowchart describing this process. </p> </li> <li> <p>Once all secondary circuit is removed and assets are aggregated then we move to aggregating primary networks. In this process we lump together similar line segments while preserving nodes with important assets connected to it (e.g. loads, capacitors, pvs, generators, storages, switches).     Here is a flowchart explaining this process.     </p> </li> <li> <p>Rename all the buses in incremental order starting from 0 (source node). Lines are renamed as <code>line_{bus1}_{bus2}</code> where bus1 and bus2 are from and to bus. Similarly transformers are renamed as <code>transformer_{bus1}_{bus2}</code>. Loads are renamed as <code>load_{bus1}</code> and other point assets are renamed in similar way.</p> </li> <li> <p>Finally we remove all the coordinate information from buses except for buses where switches are connected. Differential privacy algorithm is used to add noise to preserved bus coordinates (for switches) so they can not be identified in google maps but still maintain reasonable topological structure.</p> </li> </ol>"},{"location":"getting-started/dev-guides/","title":"Developer's Guide","text":""},{"location":"getting-started/dev-guides/#testing-markdown-linting-locally","title":"Testing markdown linting locally","text":"<p>To test linting errors for markdown files locally, you need to install following npm package.</p> <pre><code>npm install -g markdownlint-cli\n</code></pre> <p>After this you can run the following command to check for markdown linting errors. Make sure you are at the root of the repo.</p> <pre><code>markdownlint docs/**/*.md --config .markdownlint.yaml\nmarkdownlint README.md --config .markdownlint.yaml\nmarkdownlint CHANGELOG.md --config .markdownlint.yaml\n</code></pre>"},{"location":"getting-started/dev-guides/#testing-spell-check-locally","title":"Testing spell check locally","text":"<p>To test spell check locally  for markdown and python files, you need to install following npm package.</p> <pre><code>npm install -g cspell\n</code></pre> <p>After you install <code>cspell</code> you can run following command to test the spell check.</p> <pre><code>cspell --config .cspell.json \"src/**/*.py\" \"docs/**/*.md\" \"README.md\" \"CHANGELOG.md\"\n</code></pre>"},{"location":"getting-started/smartds/","title":"Downloading SMARTDS Model","text":""},{"location":"getting-started/smartds/#downloading-a-smartds-sample-model","title":"\ud83d\udce5 Downloading a SMARTDS Sample Model","text":"<p>To help you get started with testing the <code>grid-reducer</code>, you may need a sample OpenDSS model. We recommend using publicly available datasets like SMART-DS from NREL.</p> <p>To simplify this, we\u2019ve provided a small utility function to easily download a SMARTDS feeder model from the OEDI S3 bucket.</p>"},{"location":"getting-started/smartds/#example","title":"\ud83d\udee0 Example","text":"<pre><code>from grid_reducer.smartds import download_s3_folder\n\ndownload_s3_folder(\n    \"oedi-data-lake\", \n    \"SMART-DS/v1.0/2018/SFO/P12U/scenarios/base_timeseries/opendss/p12uhs0_1247/p12uhs0_1247--p12udt1266/\", \n    \"../../../dump\"\n)\n</code></pre> <p>\ud83d\udcc2 This will download the feeder model to your local ../../../dump directory.</p>"},{"location":"getting-started/smartds/#why-use-this","title":"\ud83d\udca1 Why Use This?","text":"<ul> <li>Provides a ready-to-use OpenDSS model for testing the reducer.</li> <li>Helps you get started without needing access to proprietary feeder data.</li> <li>Pulls directly from NREL\u2019s OEDI S3 public dataset.</li> </ul>"}]}